#Here's an example of a variable.
first_variable <- "This is my variable."
second_variable <- 12.5
vec_logical
print("Attempting to learn Atomic Vectors")
vec_people <- c("Aelin", "Rowan", "Manon")
#line6, assigning variable name for character comvbine function.
typeof(c("a", "b"))
#line 8, what is the data element for atomic vector combine, yields results
#that the data element is "character"
typeof(c(TRUE, FALSE, TRUE))
#line 11, finding data element for atomic vector combine of "logical"
length(vec_people)
#line 13, using a previously assinged variable of vec_people and function length()
#we are yielded result of 3 (as in 3 entries in vector vec_people)
names(second_variable) <- c(TRUE)
#line16, renamed second_variable vector content from 12.5 to TRUE using names function.
#this won't change it in the environments table, but will display name and rename when 
#pulling second_variable.
second_variable
str(list("Rowan", 2L, TRUE, TRUE, 5.5))
#line21, the str() function will describe the structure of the list in a broken down format.
#It will be the total count followed by a list of the data element and then the value.
#By adding list_tog, it is now added to environment pane under new table heading, Data.
str(list_tog)
#line25 will show the structure of the new list that is committed list_tog.
tog_books <- list("Throne of Glass", "Crown of Midnight", "Heir of Fire")
names(tog_books) <- list("Throne of Glass" = 1, "Crown of Midnight" = 2, "Heir of Fire" = 3)
#line27, commits the list.
#line28, renames the content within committed list tog_books to include other data elements.
#when using tidyverse or lubridate package, once they are installed load the packages for
#each R session with library function. library(tidyverse) then library(lubridate)
mdy_hm("10/27/2017 04:30")
#when using this make sure each section of the function has an associated value within the argument.
#the following will all yield results without an error, note: ensure that you have the correct
#maximum value in each argument, because otherwise it will error. Additionally, you have to make sure that you have
#the timespans listed from largest to smallest, eg. you can't have seconds without minutes and hours.
ymd_hms("1985-04-30 07:01:59")
ymd_hms("19850430 070159")
ymd_hm("19850430 0159")
#when making data frames, you will be naming the columns in order from left to right with each entry. 
#you can use combines function or previously named tables.
data.frame(Col_1 = vec_logical, Col_2 = vec_people)
#line43 - yields a 2 column 3 row table that includes column labels Col_1 and Col_2.
#based on this function structure, the rows have to have equal amounts of values. It will not add nulls.
if (x>0) {print("x is a positive number")} else {print("x is negative number or zero")}
#if (condition) then {execute expr1} else/otherwise {execute expr2}
